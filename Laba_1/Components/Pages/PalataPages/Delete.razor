@page "/palata/delete"
@using Microsoft.EntityFrameworkCore
@using Laba_1.Data
@inject IDbContextFactory<Laba_1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить</PageTitle>

<h1>Удалить</h1>

<p>Вы уверены, что хотите удалить запись?</p>
<div>
    <hr />
    @if (palata is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Номер палаты</dt>
            <dd class="col-sm-10">@palata.NumPalata</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Количество коек</dt>
            <dd class="col-sm-10">@palata.TotalBed</dd>
        </dl>
        <EditForm method="post" Model="palata" OnValidSubmit="DeletePalata" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(palata is null)">Удалить</button> |
            <a href="/palata?otdelenieid=@palata?.OtdelenieId">Вернуться к списку палат</a>
        </EditForm>
    }
</div>

@code {
    private Palata? palata;

    private int OtdelenieId {get; set;}

    [SupplyParameterFromQuery]
    private int PalataId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        palata = await context.Palatas.FirstOrDefaultAsync(m => m.PalataId == PalataId);

        if (palata is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        OtdelenieId = palata!.OtdelenieId;
    }

    private async Task DeletePalata()
    {
        using var context = DbFactory.CreateDbContext();
        context.Palatas.Remove(palata!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/palata?otdelenieid="+OtdelenieId.ToString());
    }
}

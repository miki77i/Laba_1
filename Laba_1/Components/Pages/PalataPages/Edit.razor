@page "/palata/edit"
@using Microsoft.EntityFrameworkCore
@using Laba_1.Data
@inject IDbContextFactory<Laba_1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<hr />
@if (Palata is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Palata" OnValidSubmit="UpdatePalata" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Palata.PalataId" value="@Palata.PalataId" />
                <div class="mb-3">
                    <label for="numpalata" class="form-label">Номер палаты:</label>
                    <InputNumber id="numpalata" @bind-Value="Palata.NumPalata" class="form-control" />
                    <ValidationMessage For="() => Palata.NumPalata" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalbed" class="form-label">Количество коек:</label>
                    <InputNumber id="totalbed" @bind-Value="Palata.TotalBed" class="form-control" />
                    <ValidationMessage For="() => Palata.TotalBed" class="text-danger" />
                </div>
                <div class="mb-3">
                    <input type="hidden" name="Palata.OtdelenieId" @bind="Palata.OtdelenieId" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/palata?otdelenieid=@Palata?.OtdelenieId">Возврат к списку палат</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int PalataId { get; set; }

    [SupplyParameterFromForm]
    private Palata? Palata { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Palata ??= await context.Palatas.FirstOrDefaultAsync(m => m.PalataId == PalataId);

        if (Palata is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePalata()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Palata!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PalataExists(Palata!.PalataId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        
        NavigationManager.NavigateTo("/palata?otdelenieId="+Palata!.OtdelenieId.ToString());
    }

    private bool PalataExists(int palataid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Palatas.Any(e => e.PalataId == palataid);
    }
}

@page "/otdelenies/delete"
@using Microsoft.EntityFrameworkCore
@using Laba_1.Data
@inject IDbContextFactory<Laba_1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить</PageTitle>

<h1>Удалить</h1>

<p>Вы уверенны, что хотите удалить отделение?</p>
<div>
    <hr />
    @if (otdelenie is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название отделения</dt>
            <dd class="col-sm-10">@otdelenie.OtdelenieName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Заведующий отделением</dt>
            <dd class="col-sm-10">@otdelenie.ZavOtdelenie</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Количество палат</dt>
            <dd class="col-sm-10">@otdelenie.TotalPalat</dd>
        </dl>
        <EditForm method="post" Model="otdelenie" OnValidSubmit="DeleteOtdelenie" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(otdelenie is null)">Удалить</button> |
            <a href="/otdelenies">Возврат к списку отделений</a>
        </EditForm>
    }
</div>

@code {
    private Otdelenie? otdelenie;

    [SupplyParameterFromQuery]
    private int OtdelenieId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        otdelenie = await context.Otdelenies.FirstOrDefaultAsync(m => m.OtdelenieId == OtdelenieId);

        if (otdelenie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOtdelenie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Otdelenies.Remove(otdelenie!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/otdelenies");
    }
}

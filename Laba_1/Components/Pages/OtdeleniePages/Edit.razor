@page "/otdelenies/edit"
@using Microsoft.EntityFrameworkCore
@using Laba_1.Data
@inject IDbContextFactory<Laba_1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактирование</PageTitle>

<h1>Редактировани</h1>

<hr />
@if (Otdelenie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Otdelenie" OnValidSubmit="UpdateOtdelenie" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Otdelenie.OtdelenieId" value="@Otdelenie.OtdelenieId" />
                <div class="mb-3">
                    <label for="otdeleniename" class="form-label">Название отделения:</label>
                    <InputText id="otdeleniename" @bind-Value="Otdelenie.OtdelenieName" class="form-control" />
                    <ValidationMessage For="() => Otdelenie.OtdelenieName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="zavotdelenie" class="form-label">Заведующий отделением:</label>
                    <InputText id="zavotdelenie" @bind-Value="Otdelenie.ZavOtdelenie" class="form-control" />
                    <ValidationMessage For="() => Otdelenie.ZavOtdelenie" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalpalat" class="form-label">Количество палат:</label>
                    <InputNumber id="totalpalat" @bind-Value="Otdelenie.TotalPalat" class="form-control" />
                    <ValidationMessage For="() => Otdelenie.TotalPalat" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/otdelenies">Возврат к списку отделений</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int OtdelenieId { get; set; }

    [SupplyParameterFromForm]
    private Otdelenie? Otdelenie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Otdelenie ??= await context.Otdelenies.FirstOrDefaultAsync(m => m.OtdelenieId == OtdelenieId);

        if (Otdelenie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateOtdelenie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Otdelenie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!OtdelenieExists(Otdelenie!.OtdelenieId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/otdelenies");
    }

    private bool OtdelenieExists(int otdelenieid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Otdelenies.Any(e => e.OtdelenieId == otdelenieid);
    }
}
